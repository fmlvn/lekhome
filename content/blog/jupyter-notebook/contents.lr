Title:

Cài đặt, sử dụng Jupyter Notebook
Date: 2016-06-06 22:00
Authors: htl

## Jupyter là gì?
Là nền tảng tính toán khoa học mã nguồn mở, [interactive](https://en.wikipedia.org/wiki/IPython), hỗ trợ **hơn 40 ngôn ngữ lập trình**, trong đó có **python** (jupyter = **ju**lia + **pyt**hon + **R**). Bài này tập trung vào việc cài đặt, sử dụng jupyter notebook trong lập trình python, cụ thể là giảng dạy python bằng jupyter. Bên cạnh đó, mình thường sử dụng jupyter notebook làm môi trường chạy thử code python ở dạng interactive, trước khi lưu vào script (Biết kết quả từng bước mình làm vẫn thích hơn nhỉ - đó là điểm mạnh của interactive).


## Jupyter notebook
Trước đây là **ipython notebook**, đổi tên thành **jupyter notebook** với mục tiêu hỗ trợ nhiều ngôn ngữ hơn. Là ứng dụng chạy trên nền web cho phép chạy interactive python (tương tự ipython). Hơn thế nữa, nó còn hỗ trợ vẽ các đồ thị, biểu đồ, hỗ trợ viết 1 "notebook" bằng cách sử dụng [Markdown](http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Working%20With%20Markdown%20Cells.html)

## Cài đặt jupyter notebook

```Yêu cầu máy đã cài python 3, pip và virtualenv```

### 1. Tạo virtualenv để chạy riêng jupyter:

```
╭─ ~
╰─$ virtualenv -p $(which python3) jupyter
Running virtualenv with interpreter /usr/local/bin/python3
Using base prefix '/usr/local'
New python executable in /home/htl/jupyter/bin/python3
Also creating executable in /home/htl/jupyter/bin/python
Installing setuptools, pip, wheel...done.
```

### 2. Kích hoạt virtualenv vừa tạo:
```
╭─  ~
╰─$ source ~/jupyter/bin/activate
(jupyter) ╭─  ~
╰─$
```

### 3. Cài jupyter notebook:

```
(jupyter) ╭─  ~
╰─$ pip install jupyter notebook
Collecting jupyter
  Using cached jupyter-1.0.0-py2.py3-none-any.whl
Collecting notebook
  Using cached notebook-4.2.1-py2.py3-none-any.whl
Collecting nbconvert (from jupyter)
  Using cached nbconvert-4.2.0-py2.py3-none-any.whl
Collecting qtconsole (from jupyter)
  Using cached qtconsole-4.2.1-py2.py3-none-any.whl
Collecting ipykernel (from jupyter)
  Using cached ipykernel-4.3.1-py2.py3-none-any.whl
Collecting jupyter-console (from jupyter)
  Using cached jupyter_console-4.1.1-py2.py3-none-any.whl
Collecting ipywidgets (from jupyter)
  Using cached ipywidgets-5.1.5-py2.py3-none-any.whl
Collecting jinja2 (from notebook)
  Using cached Jinja2-2.8-py2.py3-none-any.whl
Collecting traitlets (from notebook)
  Using cached traitlets-4.2.1-py2.py3-none-any.whl
Collecting nbformat (from notebook)
  Using cached nbformat-4.0.1-py2.py3-none-any.whl
Collecting jupyter-client (from notebook)
  Using cached jupyter_client-4.2.2-py2.py3-none-any.whl
Collecting tornado>=4 (from notebook)
Collecting terminado>=0.3.3; sys_platform != "win32" (from notebook)
Collecting ipython-genutils (from notebook)
  Using cached ipython_genutils-0.1.0-py2.py3-none-any.whl
Collecting jupyter-core (from notebook)
  Using cached jupyter_core-4.1.0-py2.py3-none-any.whl
Collecting mistune!=0.6 (from nbconvert->jupyter)
  Using cached mistune-0.7.2-py2.py3-none-any.whl
Collecting pygments (from nbconvert->jupyter)
  Using cached Pygments-2.1.3-py2.py3-none-any.whl
Collecting entrypoints (from nbconvert->jupyter)
  Using cached entrypoints-0.2.2-py2.py3-none-any.whl
Collecting ipython>=4.0.0 (from ipykernel->jupyter)
  Using cached ipython-4.2.0-py3-none-any.whl
Collecting widgetsnbextension>=1.2.3 (from ipywidgets->jupyter)
  Using cached widgetsnbextension-1.2.3-py2.py3-none-any.whl
Collecting MarkupSafe (from jinja2->notebook)
Collecting decorator (from traitlets->notebook)
  Using cached decorator-4.0.9-py2.py3-none-any.whl
Collecting jsonschema!=2.5.0,>=2.0 (from nbformat->notebook)
  Using cached jsonschema-2.5.1-py2.py3-none-any.whl
Collecting pyzmq>=13 (from jupyter-client->notebook)
  Using cached pyzmq-15.2.0-cp35-cp35m-manylinux1_x86_64.whl
Collecting ptyprocess (from terminado>=0.3.3; sys_platform != "win32"->notebook)
  Using cached ptyprocess-0.5.1-py2.py3-none-any.whl
Collecting pexpect; sys_platform != "win32" (from ipython>=4.0.0->ipykernel->jupyter)
  Using cached pexpect-4.1.0-py2.py3-none-any.whl
Requirement already satisfied (use --upgrade to upgrade): setuptools>=18.5 in ./jupyter/lib/python3.5/site-packages (from ipython>=4.0.0->ipykernel->jupyter)
Collecting simplegeneric>0.8 (from ipython>=4.0.0->ipykernel->jupyter)
Collecting pickleshare (from ipython>=4.0.0->ipykernel->jupyter)
  Using cached pickleshare-0.7.2-py2.py3-none-any.whl
Collecting backports.shutil-get-terminal-size (from ipython>=4.0.0->ipykernel->jupyter)
  Using cached backports.shutil_get_terminal_size-1.0.0-py2.py3-none-any.whl
Installing collected packages: MarkupSafe, jinja2, decorator, ipython-genutils, traitlets, mistune, pygments, jupyter-core, jsonschema, nbformat, entrypoints, nbconvert, pyzmq, jupyter-client, ptyprocess, pexpect, simplegeneric, pickleshare, backports.shutil-get-terminal-size, ipython, tornado, ipykernel, qtconsole, jupyter-console, terminado, notebook, widgetsnbextension, ipywidgets, jupyter
Successfully installed MarkupSafe-0.23 backports.shutil-get-terminal-size-1.0.0 decorator-4.0.9 entrypoints-0.2.2 ipykernel-4.3.1 ipython-4.2.0 ipython-genutils-0.1.0 ipywidgets-5.1.5 jinja2-2.8 jsonschema-2.5.1 jupyter-1.0.0 jupyter-client-4.2.2 jupyter-console-4.1.1 jupyter-core-4.1.0 mistune-0.7.2 nbconvert-4.2.0 nbformat-4.0.1 notebook-4.2.1 pexpect-4.1.0 pickleshare-0.7.2 ptyprocess-0.5.1 pygments-2.1.3 pyzmq-15.2.0 qtconsole-4.2.1 simplegeneric-0.8.1 terminado-0.6 tornado-4.3 traitlets-4.2.1 widgetsnbextension-1.2.3
(jupyter) ╭─  ~
╰─$
```

### 4. Khởi động jupyter notebook:
```
(jupyter) ╭─  ~
╰─$ jupyter notebook
[I 21:06:04.603 NotebookApp] Writing notebook server cookie secret to /run/user/1000/jupyter/notebook_cookie_secret
[I 21:06:04.900 NotebookApp] Serving notebooks from local directory: /home/htl
[I 21:06:04.901 NotebookApp] 0 active kernels
[I 21:06:04.901 NotebookApp] The Jupyter Notebook is running at: http://localhost:8888/
[I 21:06:04.901 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
```

Trình duyệt web mở ra tại địa chỉ: http://localhost:8888 vào môi trường jupyter notebook.

## Sử dụng jupyter cơ bản:

- Bấm **New -> Python 3** để tạo 1 Python 3 notebook mới

- 1 Notebook bao gồm nhiều **cell**, mỗi cell có thể ở dạng **code**, **markdown** hoặc **raw** (thường dùng **code** và **markdown**). Cell có hỗ trợ syntax highlighting tùy vào trạng thái **code** hoặc **markdown**.

- Khi thấy con trỏ nhấp nháy trong cell, bạn đang ở **edit mode**. Để chuyển sang **command mode**, bấm **esc**, khi đó bạn có thể di chuyển giữa các cell bằng các phím mũi tên, hoặc thao tác với các cell bằng các phím tắt như:
```
enter - chuyển sang edit mode
a - insert cell above
b - insert cell below
c - copy cell
x - cut cell
v - paste cell below
shift + v - paste cell above
dd - delete cell
m - chuyển cell sang dạng markdown
y - chuyển cell sang dạng code
l - bật/tắt line number
...
h - bật help để xem phím tắt
```

- Một số phím tắt khi ở **edit mode**:
```
tab/shift + tab - indent/dedent vùng được chọn
shift + tab khi con trỏ ở trong `( )` - hiện help của 1 function, có thể bấm 1, 2, 3, 4 lần để xem chi tiết hơn
hỗ trợ multi-cursor bằng cách giữ ctrl + bấm chuột vào các vị trí cần đặt cursor
```

- Khi đang ở edit mode, muốn xem help mà ko muốn `( )` rồi bấm shift+tab thì gõ `command?`, ví dụ `len?` rồi shift + enter

- Code cell hỗ trợ auto complete code bằng phím **tab**

- Sau khi gõ code trong 1 cell, có thể chạy cell bằng 1 trong các cách:

```
shift+enter: chạy code đó và chọn 1 cell ở dòng dưới (nếu chưa có sẽ tự thêm và chọn cell mới)
alt+enter: chạy code và thêm 1 cell ở dưới
ctrl+enter: chạy code
```

- Ngoài việc chạy được python code, 1 code cell có thể chạy được [magic commands](http://ipython.readthedocs.io/en/stable/interactive/magics.html), hoặc chạy shell command bằng dấu `!`, ví dụ:

```
In [1]: ! cat /etc/passwd

root:x:0:0:root:/root:/bin/zsh
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
```
(Mình đã dùng `!` để chay `wget` và cả `pip` nữa, lol)


Cơ bản đủ để dùng giảng dạy python. Tìm hiểu thêm tại: [ipython documentation](http://ipython.readthedocs.io/en/stable/) hoặc [jupyter documentation](http://jupyter.readthedocs.io/en/latest/)

Happy coding python!

P/S: Có thể dùng jupyter để tạo **file.py** (**New -> Text file**) hoặc bất cứ file gì (tạo xong đổi tên), ví dụ như mình dùng jupyter để tạo **file.md** để viết blog này chẳng hạn.


-htl-
---
author: htl
---
body:

Title: Viết blog sử dụng markdown, pelican, github pages
Authors: htl

# I. Markdown

[Markdown](https://daringfireball.net/projects/markdown/) được nói trong bài này là cú pháp để phục vụ việc chuyển text thành HTML. Tức là khi viết bằng cú pháp markdown, đưa qua 1 chương trình xử lý, nó sẽ cho ra kết quả là HTML.

## Một số cú pháp hay dùng:

### Headers

```
# H1
## H2
### H3
#### H4
##### H5
###### H6
```

**Kết quả:** (lưu ý, xem source html của kết quả để biết chính xác, việc trình bày có thể bị ảnh hưởng bới template của blog)

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Định dạng chữ:

```
Chữ nghiêng: *nghiêng* hoặc _nghiêng_. (*: asterik, _: underscore)

Chữ đậm: **đậm** hoặc __đậm__.

Nghiêng đậm: **_nghiêng đậm_** hoặc *__nghiêng đậm__*

Gạch ngang chữ: <s>gạch ngang</s>
```

**Kết quả:**

Chữ nghiêng: *nghiêng* hoặc _nghiêng_. (*: asterik, _: underscore)

Chữ đậm: **đậm** hoặc __đậm__.

Nghiêng đậm: **_nghiêng đậm_** hoặc *__nghiêng đậm__*

Gạch ngang chữ: <s>gạch ngang</s>

### Link

```
[I'm an inline-style link](http://fml.vn)

[I'm an inline-style link with title](http://fml.vn "FML Academy")

[I'm a reference-style link][Arbitrary case-insensitive reference text]

[I'm a relative reference to a repository file](../blob/master/LICENSE)

[You can use numbers for reference-style link definitions][1]

Or leave it empty and use the [link text itself].

[arbitrary case-insensitive reference text]: http://fml.vn
[1]: http://fml.vn
[link text itself]:http://fml.vn
```

**Kết quả:**

[I'm an inline-style link](http://fml.vn)

[I'm an inline-style link with title](http://fml.vn "FML Academy")

[I'm a reference-style link][Arbitrary case-insensitive reference text]

[I'm a relative reference to a repository file](../blob/master/LICENSE)

[You can use numbers for reference-style link definitions][1]

Or leave it empty and use the [link text itself].

[arbitrary case-insensitive reference text]: http://fml.vn
[1]: http://fml.vn
[link text itself]:http://fml.vn


### Image

```
Here's our logo (hover to see the title text):

Inline-style: 
![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1")

Reference-style: 
![alt text][logo]

[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"
```

**Kết quả**

Here's our logo (hover to see the title text):

Inline-style: 
![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1")

Reference-style: 
![alt text][logo]

[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"

### Code

```
`inline code` không xuống dòng
```

hoặc 

\`\`\`python

print('This is python code')

\`\`\`


**Kết quả**

`inline code` không xuống dòng


hoặc 
```python
print('This is python code')
```

Còn nhiều cú pháp nữa, xem chi tiết tại [đây](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)

# II. Pelican

[Pelican](http://blog.getpelican.com/) là một công cụ để tự động tạo file **html**, được viết bằng **python**. Hỗ trợ cú pháp **reStructure** (file đuôi .rst) và **markdown** (file đuôi .md)

## 1. Tạo virtualenv, kích hoạt và cài pelican, markdown vào virtualenv:
```
╭─htl@htl-homeserver  ~/pelican  
╰─$ virtualenv -p $(which python3) venv
Running virtualenv with interpreter /usr/local/bin/python3
Using base prefix '/usr/local'
New python executable in venv/bin/python3
Also creating executable in venv/bin/python
Installing setuptools, pip, wheel...done.
╭─htl@htl-homeserver  ~/pelican  
╰─$ source ./venv/bin/activate
(venv)╭─htl@htl-homeserver  ~/pelican  
╰─$ pip install pelican markdown
Collecting pelican
  Using cached pelican-3.6.3-py2.py3-none-any.whl
Collecting markdown
Collecting docutils (from pelican)
  Using cached docutils-0.12-py3-none-any.whl
Collecting six>=1.4 (from pelican)
  Using cached six-1.10.0-py2.py3-none-any.whl
Collecting unidecode (from pelican)
Collecting jinja2>=2.7 (from pelican)
  Using cached Jinja2-2.8-py2.py3-none-any.whl
Collecting feedgenerator>=1.6 (from pelican)
Collecting pytz>=0a (from pelican)
  Using cached pytz-2016.4-py2.py3-none-any.whl
Collecting pygments (from pelican)
  Using cached Pygments-2.1.3-py2.py3-none-any.whl
Collecting blinker (from pelican)
Collecting python-dateutil (from pelican)
  Using cached python_dateutil-2.5.3-py2.py3-none-any.whl
Collecting MarkupSafe (from jinja2>=2.7->pelican)
Installing collected packages: docutils, six, unidecode, MarkupSafe, jinja2, pytz, feedgenerator, pygments, blinker, python-dateutil, pelican, markdown
Successfully installed MarkupSafe-0.23 blinker-1.4 docutils-0.12 feedgenerator-1.8 jinja2-2.8 markdown-2.6.6 pelican-3.6.3 pygments-2.1.3 python-dateutil-2.5.3 pytz-2016.4 six-1.10.0 unidecode-0.4.19
```


## 2. Tạo thư mục chứa blog và chạy `pelican-quickstart` để thiết lập các thông số ban đầu:
```
(venv)╭─htl@htl-homeserver  ~/pelican  
╰─$ mkdir blog
mkdir: created directory 'blog'
(venv)╭─htl@htl-homeserver  ~/pelican  
╰─$ cd blog
(venv)╭─htl@htl-homeserver  ~/pelican/blog  
╰─$ pelican-quickstart
Welcome to pelican-quickstart v3.6.3.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

    
> Where do you want to create your new web site? [.] 
> What will be the title of this web site? Test blog
> Who will be the author of this web site? htl
> What will be the default language of this web site? [en] vn
> Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
> Do you want to enable article pagination? (Y/n) y
> How many articles per page do you want? [10] 
> What is your time zone? [Europe/Paris] Asia/Ho_Chi_Minh
> Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y
> Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) y
> Do you want to upload your website using FTP? (y/N) n
> Do you want to upload your website using SSH? (y/N) n
> Do you want to upload your website using Dropbox? (y/N) n
> Do you want to upload your website using S3? (y/N) n
> Do you want to upload your website using Rackspace Cloud Files? (y/N) n
> Do you want to upload your website using GitHub Pages? (y/N) y
> Is this your personal page (username.github.io)? (y/N) n
Done. Your new project is available at /home/htl/pelican/blog
```

## 3. Viết blog trong thư mục `content`:

Đơn giản là chỉ cần tạo 1 file `.md` tại thư mục `/blog/content`, nội dung file được định dạng theo cú pháp markdown.

Các thông tin (metadata) cần thiết cho 1 bài viết được ghi ngay trên đầu file. Metadata tối thiểu bắt buộc phải có là `Title`, ngoài ra với cấu hình mặc định thì nên thêm `Date`:

```markdown
Title: Tiêu đề bài viết
Date: 2016-06-28

Nội dung viết ở đây, định dạng **markdown**
```
Nếu metadata `Date` không được cung cấp trong nội dung bài viết thì pelican sẽ lấy thời gian tạo ra file, với điều kiện trong file `pelicanconf.py` phải có dòng (mà mặc định là chưa có):
```python
DEFAULT_DATE = 'fs'
```

## 4. Tạo file html:
Điều kiện là khi khởi tạo bằng lệnh `pelican-quickstart` phải bật công cụ tự động tạo html ở câu hỏi này:
```
> Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y
```
Khi đó sẽ có file `Makefile` tại thư mục gốc của blog. Tạo blog bằng cách chạy lệnh `make html`:
```
(venv)╭─htl@htl-homeserver  ~/pelican/blog  
╰─$ make html                  
pelican /home/htl/pelican/blog/content -o /home/htl/pelican/blog/output -s /home/htl/pelican/blog/pelicanconf.py 
Done: Processed 1 article, 0 drafts, 0 pages and 0 hidden pages in 0.22 seconds.
```

Vậy là đã tạo được 1 file html trong thư mục `output` (ngang hàng với `content`).

Thử xem blog mình vừa viết trông như thế nào, dùng lệnh `make serve`:
```
(venv)╭─htl@htl-homeserver  ~/pelican/blog  
╰─$ make serve
cd /home/htl/pelican/blog/output && python -m pelican.server
```
Vào http://localhost:8000 để xem thử:

![]({filename}/images/test-blog-pelican.png)


# III. Upload lên github pages:

### 1. Tạo 1 github repo có tên là `username.github.io` với `username` là tên tài khoản github của bạn.

### 2. Clone repo về local:
```
(venv)╭─htl@htl-homeserver  ~/pelican  
╰─$ git clone git@github.com:fmltestblog/fmltestblog.github.io.git
Cloning into 'fmltestblog.github.io'...
warning: You appear to have cloned an empty repository.
```
### 3. Copy tất cả folder `output` vào thư mục của github repo:
```
(venv)╭─htl@htl-homeserver  ~/pelican  
╰─$ cd fmltestblog.github.io 
(venv)╭─htl@htl-homeserver  ~/pelican/fmltestblog.github.io  ‹master› 
╰─$ cp -R ../blog/output/* .
```
### 4. git add,  commit và push:
```
(venv)╭─htl@htl-homeserver  ~/pelican/fmltestblog.github.io  ‹master*› 
╰─$ git add .
(venv)╭─htl@htl-homeserver  ~/pelican/fmltestblog.github.io  ‹master*› 
╰─$ git commit -m 'first blog commit'
[master (root-commit) 5d4216d] first blog commit
 33 files changed, 1250 insertions(+)
 create mode 100644 archives.html
 create mode 100644 author/htl.html
 create mode 100644 authors.html
 create mode 100644 categories.html
 create mode 100644 category/misc.html
 create mode 100644 index.html
 create mode 100644 tags.html
 create mode 100644 theme/css/main.css
 create mode 100644 theme/css/pygment.css
 create mode 100644 theme/css/reset.css
 create mode 100644 theme/css/typogrify.css
 create mode 100644 theme/css/wide.css
 create mode 100644 theme/images/icons/aboutme.png
 create mode 100644 theme/images/icons/bitbucket.png
 create mode 100644 theme/images/icons/delicious.png
 create mode 100644 theme/images/icons/facebook.png
 create mode 100644 theme/images/icons/github.png
 create mode 100644 theme/images/icons/gitorious.png
 create mode 100644 theme/images/icons/gittip.png
 create mode 100644 theme/images/icons/google-groups.png
 create mode 100644 theme/images/icons/google-plus.png
 create mode 100644 theme/images/icons/hackernews.png
 create mode 100644 theme/images/icons/lastfm.png
 create mode 100644 theme/images/icons/linkedin.png
 create mode 100644 theme/images/icons/reddit.png
 create mode 100644 theme/images/icons/rss.png
 create mode 100644 theme/images/icons/slideshare.png
 create mode 100644 theme/images/icons/speakerdeck.png
 create mode 100644 theme/images/icons/stackoverflow.png
 create mode 100644 theme/images/icons/twitter.png
 create mode 100644 theme/images/icons/vimeo.png
 create mode 100644 theme/images/icons/youtube.png
 create mode 100644 this-is-post-title.html
(venv)╭─htl@htl-homeserver  ~/pelican/fmltestblog.github.io  ‹master› 
╰─$ git push origin master 
Counting objects: 41, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (38/38), done.
Writing objects: 100% (41/41), 24.48 KiB, done.
Total 41 (delta 8), reused 0 (delta 0)
To git@github.com:fmltestblog/fmltestblog.github.io.git
 * [new branch]      master -> master
```


### 5. Mở trình duyệt, truy cập https://username.github.io
Blog của bạn đã online. Khi thêm 1 bài viết mới, hãy chạy lại từ bước **II.4** và push lên github.

Demo: [https://fmltestblog.github.io/](https://fmltestblog.github.io/)


-htl-
---
title: Cài đặt, sử dụng Jupyter Notebook
