title: Gi·∫£i m√£ r·∫Øc r·ªëi ph√©p to√°n +=
---
author: HVN
---
body:

## list v√† tuple - hai lo√†i kh√°c bi·ªát
Bi·∫øt list + list tr·∫£ v·ªÅ 1 list, tuple + tuple tr·∫£ v·ªÅ 1 tuple,
v·∫≠y list + tuple th√¨ tr·∫£ v·ªÅ g√¨?

C√¢u tr·∫£ l·ªùi ƒë√∫ng l√†: kh√¥ng tr·∫£ v·ªÅ g√¨ c·∫£ b·ªüi c√≥ **exception** x·∫£y ra.
D√π cho l·∫•y list + tuple hay tuple + list ƒëi chƒÉng n·ªØa:

```python
>>> [1] + (2,)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "tuple") to list
>>> (2,) + [1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate tuple (not "list") to tuple
```

ƒë√¢y l√† **TypeError** exception, v·ªõi n·ªôi dung r·∫•t r√µ r√†ng: ch·ªâ c√≥ th·ªÉ c·ªông list
v·ªõi list, tuple v·ªõi tuple.

## a += b c√≥ ƒë√∫ng l√† a = a + b?
Th√¥ng th∆∞·ªùng, ph√©p t√≠nh ``a += b`` ƒë∆∞·ª£c hi·ªÉu l√† ``a = a + b``.
ƒêi·ªÅu n√†y ƒë√∫ng trong h·∫ßu h·∫øt c√°c tr∆∞·ªùng h·ª£p... cho ƒë·∫øn khi n√≥ sai:

```python
>>> a = 5
>>> b = 4
>>> a += b
>>> print(a)
9
>>> a = 'pymi'
>>> b = '.vn'
>>> a += b
>>> print(a)
pymi.vn
>>> a = [1]
>>> b = (2,)
>>> a += b
>>> print(a)
[1, 2]
>>> # ·ªí ·ªì ·ªì ·ªì ·ªì üò± v√¨ sao list l·∫°i c·ªông ƒë∆∞·ª£c v·ªõi tuple üôÑ
```

Ph√©p to√°n ``+=``, ``-=``, ``*=``, ``/=`` ƒë∆∞·ª£c g·ªçi l√† **augmented
assignment operators** (ph√©p to√°n "augmented assignment").

### Augmented /…îÀê…°Ààm…õnt…™d/
Vietsub: l√†m tƒÉng l√™n.
Engsub: Having been made greater in size or value.

Xem ƒë·∫ßy ƒë·ªß danh s√°ch c√°c ph√©p to√°n **augmented assignment** t·∫°i
[trang ƒë·ªãnh nghƒ©a c√∫ ph√°p c·ªßa
Python](https://docs.python.org/3/reference/grammar.html).

## B·∫£n ch·∫•t c·ªßa c√°c ph√©p to√°n

Trong Python, b·∫£n ch·∫•t c√°c ph√©p to√°n ƒë·ªÅu ch·ªâ l√† ``syntactic sugar`` (l√†m cho c√∫
ph√°p th√™m ng·ªçt - d·ªÖ nh√¨n).  Ph√©p c·ªông ``a + b``, th·ª±c ch·∫•t ƒë∆∞·ª£c th·ª±c hi·ªán b·∫±ng
c√°ch g·ªçi method ``__add__`` c·ªßa object ``a`` v·ªõi argument l√† ``b``.

```python
>>> a = 5
>>> b = 4
>>> a.__add__(b)
9
```
T·∫°i ƒë√¢y, method ``__add__`` tr·∫£ v·ªÅ m·ªôt object m·ªõi l√† s·ªë ``9``.

Khi vi·∫øt ``a = a + b``, ta c√≥

```python
>>> a = 5
>>> id(a)
4309492224
>>> b = 4
>>> a = a.__add__(b)
>>> print(a, id(a))
9 4309492352 # id ƒë√£ kh√°c
```

·ªû ƒë√¢y s·∫Ω g√°n cho t√™n (bi·∫øn) ``a`` k·∫øt qu·∫£ c·ªßa ph√©p t√≠nh ``a+b`` - m·ªôt object
m·ªõi (s·ªë 9).

### Ph√©p to√°n += ho·∫°t ƒë·ªông th·∫ø n√†o?
C√°ch ho·∫°t ƒë·ªông c·ªßa **augmented assigment** ƒë∆∞·ª£c m√¥ t·∫£ t·∫°i
[PEP0203](https://www.python.org/dev/peps/pep-0203/). ƒêo·∫°n tr√≠ch t·ª´
[PEP0203](https://www.python.org/dev/peps/pep-0203/):

```
 So, given an instance object `x', the expression

        x += y

    tries to call x.__iadd__(y), which is the `in-place' variant of
    __add__. If __iadd__ is not present, x.__add__(y) is attempted,
    and finally y.__radd__(x) if __add__ is missing too.
```

khi th·ª±c hi·ªán ph√©p to√°n ``+=``, Python s·∫Ω th·ª≠ method ``__iadd__``
tr∆∞·ªõc. N·∫øu method n√†y kh√¥ng t·ªìn t·∫°i, Python l·∫°i th·ª≠ ``__add__``
r·ªìi sau c√πng th·ª≠ g·ªçi ``__radd__`` .
``__iadd__`` l√† phi√™n b·∫£n **in-place** c·ªßa ``__add__``,
Khi m√† ``__add__`` s·∫Ω tr·∫£ v·ªÅ m·ªôt object m·ªõi ch·ª©a k·∫øt qu·∫£ c·ªßa ph√©p c·ªông,
th√¨ ``__iadd__`` l·∫°i thay ƒë·ªïi gi√° tr·ªã c·ªßa ch√≠nh object g·ªçi n√≥.

#### list += tuple

List c√≥ method ``__iadd__``, n√™n khi d√πng ph√©p to√°n ``+=``, python
s·∫Ω g·ªçi ``__iadd__``, method n√†y thay ƒë·ªïi ch√≠nh list object b·∫±ng vi·ªác
[g·ªçi  method
``extend``](https://hg.python.org/cpython/file/3.5/Objects/listobject.c#l902).
``extend`` ch·∫•p nh·∫≠n ƒë·∫ßu v√†o l√†
 iterable (ki·ªÉu d·ªØ li·ªáu ch·ª©a nhi·ªÅu gi√° tr·ªã nh∆∞ list, string, tuple ...)
n√™n c√≥ th·ªÉ vi·∫øt list += tuple. K·∫øt qu·∫£ thu ƒë∆∞·ª£c l√† list ban ƒë·∫ßu v·ªõi gi√° tr·ªã m·ªõi
ƒë∆∞·ª£c extend t·ª´ tuple ƒë∆∞a v√†o.

```python
>>> lst = [1]
>>> id(lst)
4340949768
>>> lst += (2,)
>>> print(lst, id(lst))
[1, 2] 4340949768  # id kh√¥ng ƒë·ªïi
```

#### tuple += list

V·ªõi ki·ªÉu d·ªØ li·ªáu immutable (nh∆∞ tuple, integer, string ... ), ch√∫ng kh√¥ng
c√≥ method ``__iadd__``, n√™n ph√©p to√°n ``+=`` s·∫Ω g·ªçi
method ``__add__``. Vi·∫øt ``a += b`` khi a l√† tuple, b l√† list s·∫Ω t∆∞∆°ng ƒë∆∞∆°ng
v·ªõi vi·∫øt ``a = a + b``, m√† tuple + list th√¨ kh√¥ng thu ƒë∆∞·ª£c g√¨:

```python
>>> a = (2,)
>>> b = [1]
>>> a += b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate tuple (not "list") to tuple
```

**ƒê√¢y kh√¥ng ph·∫£i l√† bug c·ªßa Python, n√≥ l√† m·ªôt t√≠nh nƒÉng ‚Ñ¢** theo thi·∫øt k·∫ø.

B·ªüi n·∫øu cho ph√©p thay ƒë·ªïi m·ªôt ki·ªÉu d·ªØ li·ªáu ``immutable``
th√¨ khi vi·∫øt ``4 + 5`` b·∫°n s·∫Ω mu·ªën nh·∫≠n ƒë∆∞·ª£c 1 object
m·ªõi l√† s·ªë ``9``, hay b·∫°n mu·ªën s·ª≠a s·ªë ``4`` th√†nh s·ªë ``9``? ü§î

## K·∫øt lu·∫≠n
Ph√©p to√°n ``+=`` *khi·∫øn cho* m·ªôt list c√≥ th·ªÉ "c·ªông" ƒë∆∞·ª£c v·ªõi m·ªôt tuple ƒë√£
kh√¥ng c√≤n l√† ƒëi·ªÅu b√≠ ·∫©n m·ªôt khi b·ª©c m√†n b√≠ m·∫≠t ƒë√£ ƒë∆∞·ª£c t·ª•t xu·ªëng.
H√£y nh√¨n c√°c ph√©p to√°n theo m·ªôt con m·∫Øt kh√°c, ch√∫ng ch·ªâ l√† k√Ω hi·ªáu v√† che
gi·∫•u ƒëi c∆° ch·∫ø ho·∫°t ƒë·ªông th·ª±c s·ª± ·ªü ph√≠a d∆∞·ªõi. ƒê√¢y l√† l·∫≠p tr√¨nh, kh√¥ng ph·∫£i
to√°n h·ªçc.

---
shortintro:

a += b c√≥ th·ª±c s·ª± l√† a = a + b? chuy·ªán g√¨ x·∫£y ra khi a + b?
---
pub_date: 2016-10-09
